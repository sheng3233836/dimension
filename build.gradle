group = 'com.youhujia.dimension'
version = '0.0.1'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
    maven { url "http://mvn.gt.igexin.com/nexus/content/repositories/releases/" }
    mavenCentral()
    mavenLocal()
}

buildscript {
    ext {
        springBootVersion = '1.3.7.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.7.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }

}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'com.youhujia.dimension.DimensionApplication'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.SR6'
    }
}

dependencies {
    compile group: "org.springframework.boot", name: "spring-boot-starter-actuator", version: "${springBootVersion}"
    compile group: "org.springframework.boot", name: "spring-boot-devtools", version: "$springBootVersion"
    compile group: "org.springframework.boot", name: "spring-boot-starter-web", version: "$springBootVersion"
    compile group: "org.springframework.cloud", name: "spring-cloud-starter-config"
    compile group: "org.springframework.cloud", name: "spring-cloud-starter-eureka"
    compile group: "com.netflix.feign", name: "feign-okhttp", version: "8.16.2"
    compile group: "com.google.protobuf", name: "protobuf-java", version: "2.6.1"
    compile group: "com.googlecode.protobuf-java-format", name: "protobuf-java-format", version: "1.2"
    compile group: "com.alibaba", name: "fastjson", version: "1.2.17"

    testCompile group: "org.springframework.boot", name: "spring-boot-starter-test", version: "$springBootVersion"
}

def execute = { cmdString ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine cmdString
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def getGitHash = { ->
    return execute(["git", "rev-parse", "--short", "HEAD"])
}
def getNowTime = { ->
    return execute(["date", "+%s"])
}
def gitHash = "${getGitHash}"
def buildJar = "build/libs/${jar.baseName}-${version}.jar"
def buildTag = "${project.version}-${gitHash}"
def buildImage = "${project.group}/${jar.baseName}"
def buildVersion = "${project.version}-${gitHash}"
def nowTime = "${getNowTime()}"
def TZ = "Asia/Shanghai"

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    tagVersion = buildTag

    docker {
        baseImage "java:8-jre"
        maintainer "Youhujia, Inc. Backend Awesome Team"
        setEnvironment "CONFIG_URL", "$System.env.CONFIG_URL"
        setEnvironment "ENV", "$System.env.ENV"
        addFile "${buildJar}", "/"
        addFile "entrypoint.sh", "/"
        volume "/tmp"
        runCommand "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone"
        entryPoint(["/entrypoint.sh"])
        exposePort System.env.PORT as Integer
        exposePort System.env.MPORT as Integer
    }
}

task runDocker() {
    doLast {
        execute(["docker", "run",
                 "-p", "$System.env.PORT:$System.env.PORT",
                 "-p", "$System.env.MPORT:$System.env.MPORT",
                 "-e", "IP=$System.env.IP",
                 "-e", "PORT=$System.env.PORT",
                 "-e", "MPORT=$System.env.MPORT",
                 "--net=host",
                 "-it", "-d", "--name", "${nowTime}",
                 "${buildImage}:${buildVersion}", "java"])
    }
}

task go(dependsOn: [buildDocker, runDocker]) {
    println "\nBig brother is watching you!\n"
}